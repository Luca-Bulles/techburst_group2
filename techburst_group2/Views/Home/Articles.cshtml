@using techburst_BLL.Collections
@using Interfaces.BLL
@using techburst_group2.Utilities
@inject ITagCollection TagCollection
@model IEnumerable<ArticleModel>
@{ ViewData["Title"] = "Articles";
    var allTags = ViewModelConverter.ConvertTagModelList(TagCollection.GetAllTags());
}

<head>
    <link rel="stylesheet" href="~/css/articles.css">
</head>

<style>
    .text {
        font-size: 3em;
        color: #000000;
        font-weight: 600;
    }

    .article-button {
        font-size: 1em;
        color: #000000;
        background: #FFE000;
        display: inline-block;
        padding: 10px 30px;
        margin-top: 20px;
        text-transform: uppercase;
        text-decoration: none;
        letter-spacing: 2px;
        transition: 0.5s;
    }

    .articlecard {
        font-size: 1em;
        color: #000000;
        display: inline-block;
        text-transform: uppercase;
        text-decoration: none;
        letter-spacing: 2px;
        transition: 0.5s;
        border-color: #FFE000 !important;
    }

        .articlecard h5 {
            color: #FFE000;
            font-weight: 600;
        }

        .articlecard p {
            color: white;
        }

    .dropdownitems {
        text-decoration: none;
        color: white;
        font-size: 1em;
    }
</style>


<body>
    <div class="card border-yellow shadow text-center border-color p-3 contact-big-text">
        <h2 class="text text-center ">TECH BURST ARTICLES</h2>
    </div>


    <div class="dropdown">
        <button class="btn btn-light dropdown-toggle article-button" type="button" data-toggle="dropdown">
            Filter by Category
            <span class="caret"></span>
        </button>
        <ul class="dropdown-menu bg-rockstar align-items-center">
            <a class="dropdown-item" style="color:#000000; font-weight:600;" href="@Url.Action("LoadAllArticles", "Home")">Reset Filter</a></>

            @foreach (var tag in allTags)
            {
                <a class="dropdown-item" style="color:#000000" href="@Url.Action("LoadArticlesByTag", "Home", new { tagId = tag.Id }, null)">@tag.Name</a>
            }
        </ul>
    </div>

    <div class="container">
        <div class="card-columns">
            @if (Model != null)
            {
                @foreach (var article in Model)
                {
                    if (article.Content.Length > 160)
                    {
                        article.Content = article.Content.Substring(0, 160) + "...";
                    }
                    if (article.Title.Length > 25)
                    {
                        article.Title = article.Title.Substring(0, 23) + "...";
                    }


                    string contentWithoutHeaders = ArticleTextManager.ParseHeaderContent(article.Content);
                    string parsedContent = ArticleTextManager.ParseHtmlTags(contentWithoutHeaders);
            <div class="card shadow border-color articlecard">

                <img class="card-img text-white" src="@article.Images" alt="Image currently unavailable">
                <div class="card-img-overlay">
                    <a href="#" class="btn btn-primary mb-4" style="font-weight:600; color:#000000;">@TagCollection.GetById(article.TagID).Name</a>
                </div>
                <small class="text-muted d-flex justify-content-center mt-1">

                    <p class="text-muted">Written by: | @Html.DisplayFor(model => article.Author)</p>
                </small>

                <div class="card-body articlecard">

                    <h5 asp-action="ArticlePage" class="card-title articles-text">@Html.DisplayFor(model => article.Title)</h5>

                    <p class="mt-2">@Html.DisplayFor(model => parsedContent)</p>
                </div>
                <a class="card-img-overlay" href="@Url.Action("ArticlePage", "Article", new { id = article.Id }, null)"></a>
                <div class="card-footer text-muted d-flex justify-content-between bg-transparent border-top-0">
                    <div class="views">
                        @{
                            var date = article.CreatedAt.Date.ToString("dd/MM/yyyy");
                        }
                        <p class="far fa-clock text-dark">publish date:  @Html.DisplayFor(modelItem => date)</p>
                    </div>

                </div>
            </div>
                }
            }
        </div>

    </div>

</body>
